CCS PCM C Compiler, Version 5.015, 5967               29-Jul-21 21:01

               Filename:   D:\Projects Github\Joystick Project\Joystick CCS C Code\Joystick.lst

               ROM used:   879 words (11%)
                           Largest free fragment is 2048
               RAM used:   25 (7%) at main() level
                           30 (8%) worst case
               Stack used: 3 locations
               Stack size: 8

*
0000:  MOVLW  01
0001:  MOVWF  0A
0002:  GOTO   1C2
0003:  NOP
.................... #include   <16f877A.h> 
.................... //////////// Standard Header file for the PIC16F877A device //////////////// 
.................... /////////////////////////////////////////////////////////////////////////// 
.................... ////        (C) Copyright 1996, 2013 Custom Computer Services          //// 
.................... //// This source code may only be used by licensed users of the CCS C  //// 
.................... //// compiler.  This source code may only be distributed to other      //// 
.................... //// licensed users of the CCS C compiler.  No other use, reproduction //// 
.................... //// or distribution is permitted without written permission.          //// 
.................... //// Derivative programs created using this software in object code    //// 
.................... //// form are not restricted in any way.                               //// 
.................... /////////////////////////////////////////////////////////////////////////// 
.................... #device PIC16F877A 
0004:  DATA D8,1E
0005:  DATA 20,00
0006:  DATA A0,2C
0007:  DATA 3D,10
0008:  DATA 00,01
0009:  DATA 20,10
000A:  DATA 20,10
000B:  DATA A0,29
000C:  DATA 41,21
000D:  DATA 49,2A
000E:  DATA 20,10
000F:  DATA 20,10
0010:  DATA 00,01
0011:  DATA 20,10
0012:  DATA 20,10
0013:  DATA A0,24
0014:  DATA CC,22
0015:  DATA D2,24
0016:  DATA 20,10
0017:  DATA 20,10
0018:  DATA 00,01
0019:  DATA 20,10
001A:  DATA 20,10
001B:  DATA A0,23
001C:  DATA 45,29
001D:  DATA 49,10
001E:  DATA 20,10
001F:  DATA 20,00
0020:  DATA 20,10
0021:  DATA 20,10
0022:  DATA A0,29
0023:  DATA C1,23
0024:  DATA 20,10
0025:  DATA 20,10
0026:  DATA 20,00
0027:  DATA 20,10
0028:  DATA 20,10
0029:  DATA A0,29
002A:  DATA 4F,26
002B:  DATA 20,10
002C:  DATA 20,10
002D:  DATA 20,00
002E:  DATA 20,10
002F:  DATA 20,10
0030:  DATA 49,26
0031:  DATA 45,29
0032:  DATA 49,10
0033:  DATA D3,20
0034:  DATA 47,10
0035:  DATA 20,10
0036:  DATA 20,00
0037:  DATA 20,10
0038:  DATA 20,10
0039:  DATA C7,22
003A:  DATA D2,24
003B:  DATA A0,29
003C:  DATA 4F,26
003D:  DATA 20,10
003E:  DATA 20,10
003F:  DATA 00,01
0040:  DATA 20,10
0041:  DATA 20,10
0042:  DATA 49,26
0043:  DATA 45,29
0044:  DATA 49,10
0045:  DATA D3,27
0046:  DATA 4C,10
0047:  DATA 20,10
0048:  DATA 20,00
0049:  DATA 20,10
004A:  DATA 20,10
004B:  DATA C7,22
004C:  DATA D2,24
004D:  DATA A0,29
004E:  DATA C1,23
004F:  DATA 20,10
0050:  DATA 20,10
0051:  DATA 00,00
*
00DD:  CLRF   78
00DE:  CLRF   79
00DF:  CLRF   77
00E0:  CLRF   7A
00E1:  MOVF   37,W
00E2:  BTFSS  03.2
00E3:  GOTO   0E7
00E4:  MOVF   36,W
00E5:  BTFSC  03.2
00E6:  GOTO   101
00E7:  MOVLW  10
00E8:  MOVWF  38
00E9:  BCF    03.0
00EA:  RLF    34,F
00EB:  RLF    35,F
00EC:  RLF    77,F
00ED:  RLF    7A,F
00EE:  MOVF   37,W
00EF:  SUBWF  7A,W
00F0:  BTFSS  03.2
00F1:  GOTO   0F4
00F2:  MOVF   36,W
00F3:  SUBWF  77,W
00F4:  BTFSS  03.0
00F5:  GOTO   0FD
00F6:  MOVF   36,W
00F7:  SUBWF  77,F
00F8:  BTFSS  03.0
00F9:  DECF   7A,F
00FA:  MOVF   37,W
00FB:  SUBWF  7A,F
00FC:  BSF    03.0
00FD:  RLF    78,F
00FE:  RLF    79,F
00FF:  DECFSZ 38,F
0100:  GOTO   0E9
0101:  RETURN
*
0164:  MOVF   0B,W
0165:  MOVWF  32
0166:  BCF    0B.7
0167:  BSF    03.5
0168:  BSF    03.6
0169:  BSF    0C.7
016A:  BSF    0C.0
016B:  NOP
016C:  NOP
016D:  BCF    03.5
016E:  BCF    03.6
016F:  BTFSC  32.7
0170:  BSF    0B.7
0171:  BSF    03.6
0172:  MOVF   0C,W
0173:  ANDLW  7F
0174:  BTFSC  03.2
0175:  GOTO   1B8
0176:  BCF    03.6
0177:  MOVWF  32
0178:  BSF    03.6
0179:  MOVF   0D,W
017A:  BCF    03.6
017B:  MOVWF  33
017C:  BSF    03.6
017D:  MOVF   0F,W
017E:  BCF    03.6
017F:  MOVWF  34
0180:  MOVF   32,W
0181:  MOVWF  35
0182:  CALL   154
0183:  MOVF   33,W
0184:  BSF    03.6
0185:  MOVWF  0D
0186:  BCF    03.6
0187:  MOVF   34,W
0188:  BSF    03.6
0189:  MOVWF  0F
018A:  BCF    03.6
018B:  MOVF   0B,W
018C:  MOVWF  35
018D:  BCF    0B.7
018E:  BSF    03.5
018F:  BSF    03.6
0190:  BSF    0C.7
0191:  BSF    0C.0
0192:  NOP
0193:  NOP
0194:  BCF    03.5
0195:  BCF    03.6
0196:  BTFSC  35.7
0197:  BSF    0B.7
0198:  BSF    03.6
0199:  RLF    0C,W
019A:  RLF    0E,W
019B:  ANDLW  7F
019C:  BTFSC  03.2
019D:  GOTO   1B8
019E:  BCF    03.6
019F:  MOVWF  32
01A0:  BSF    03.6
01A1:  MOVF   0D,W
01A2:  BCF    03.6
01A3:  MOVWF  33
01A4:  BSF    03.6
01A5:  MOVF   0F,W
01A6:  BCF    03.6
01A7:  MOVWF  34
01A8:  MOVF   32,W
01A9:  MOVWF  35
01AA:  CALL   154
01AB:  MOVF   33,W
01AC:  BSF    03.6
01AD:  MOVWF  0D
01AE:  BCF    03.6
01AF:  MOVF   34,W
01B0:  BSF    03.6
01B1:  MOVWF  0F
01B2:  INCF   0D,F
01B3:  BTFSC  03.2
01B4:  INCF   0F,F
01B5:  BCF    03.6
01B6:  GOTO   164
01B7:  BSF    03.6
01B8:  BCF    03.6
01B9:  RETURN
....................  
.................... #list 
....................  
.................... #device    adc=10 
.................... #use       delay (CLOCK=20M, CRYSTAL=20M) 
*
0052:  MOVLW  32
0053:  MOVWF  04
0054:  BCF    03.7
0055:  MOVF   00,W
0056:  BTFSC  03.2
0057:  GOTO   065
0058:  MOVLW  06
0059:  MOVWF  78
005A:  CLRF   77
005B:  DECFSZ 77,F
005C:  GOTO   05B
005D:  DECFSZ 78,F
005E:  GOTO   05A
005F:  MOVLW  7B
0060:  MOVWF  77
0061:  DECFSZ 77,F
0062:  GOTO   061
0063:  DECFSZ 00,F
0064:  GOTO   058
0065:  RETURN
....................  
.................... #fuses   BROWNOUT, HS, NOWDT, NOLVP 
....................  
....................  
.................... #define   lcd_d4   pin_b0 
.................... #define   lcd_d5   pin_b1 
.................... #define   lcd_d6   pin_b2 
.................... #define   lcd_d7   pin_b3 
....................  
.................... #define   lcd_rs   pin_b5 
.................... #define   lcd_en   pin_b4 
....................  
.................... #define   func_set       0b00101000 
.................... #define   disp_control   0b00001100 
.................... #define   disp_clear     0b00000001 
....................  
.................... ///////////////////////////////////////////////// 
.................... ///////// variables ///////////////////////////// 
....................  
....................  
.................... unsigned int16   adc_value; 
.................... unsigned int16   adc_valueX; 
.................... unsigned int16   adc_valueY; 
.................... unsigned int16   adc_value_eskiX = 0; 
.................... unsigned int16   adc_value_eskiY = 0; 
.................... signed int16   digit1, digit2, digit3, digit4; 
....................  
.................... ///////////////////////////////////////////////// 
.................... ///////// functions ///////////////////////////// 
....................  
.................... void   lcd_init       (void); 
.................... void   lcd_data       (unsigned char); 
.................... void   lcd_cmd        (unsigned char); 
.................... void   lcd_nibble     (unsigned char); 
.................... void   lcd_clear      (void); 
.................... void   lcd_line1      (unsigned char); 
.................... void   lcd_line2      (unsigned char); 
.................... void   bcd            (void); 
....................  
.................... ///////////////////////////////////////////////// 
....................  
.................... void main() 
*
01C2:  MOVF   03,W
01C3:  ANDLW  1F
01C4:  MOVWF  03
01C5:  CLRF   27
01C6:  CLRF   26
01C7:  CLRF   29
01C8:  CLRF   28
01C9:  BSF    03.5
01CA:  BSF    1F.0
01CB:  BSF    1F.1
01CC:  BSF    1F.2
01CD:  BCF    1F.3
01CE:  MOVLW  07
01CF:  MOVWF  1C
01D0:  BCF    03.7
.................... {    
....................    lcd_init(); 
01D1:  BCF    03.5
01D2:  GOTO   0B1
....................     
....................    SETUP_ADC_PORTS(AN0_AN1_AN3); 
01D3:  BSF    03.5
01D4:  BCF    1F.0
01D5:  BCF    1F.1
01D6:  BSF    1F.2
01D7:  BCF    1F.3
....................     
....................    setup_adc(ADC_CLOCK_DIV_2); 
01D8:  BCF    1F.6
01D9:  BCF    03.5
01DA:  BCF    1F.6
01DB:  BCF    1F.7
01DC:  BSF    03.5
01DD:  BSF    1F.7
01DE:  BCF    03.5
01DF:  BSF    1F.0
....................     
....................    set_adc_channel(1); 
01E0:  MOVLW  08
01E1:  MOVWF  78
01E2:  MOVF   1F,W
01E3:  ANDLW  C7
01E4:  IORWF  78,W
01E5:  MOVWF  1F
....................    adc_value_eskiX = read_adc(); 
01E6:  BSF    1F.2
01E7:  BTFSC  1F.2
01E8:  GOTO   1E7
01E9:  BSF    03.5
01EA:  MOVF   1E,W
01EB:  BCF    03.5
01EC:  MOVWF  26
01ED:  MOVF   1E,W
01EE:  MOVWF  27
....................     
....................    set_adc_channel(0); 
01EF:  MOVLW  00
01F0:  MOVWF  78
01F1:  MOVF   1F,W
01F2:  ANDLW  C7
01F3:  IORWF  78,W
01F4:  MOVWF  1F
....................    adc_value_eskiY = read_adc(); 
01F5:  BSF    1F.2
01F6:  BTFSC  1F.2
01F7:  GOTO   1F6
01F8:  BSF    03.5
01F9:  MOVF   1E,W
01FA:  BCF    03.5
01FB:  MOVWF  28
01FC:  MOVF   1E,W
01FD:  MOVWF  29
....................  
.................... while(1) 
....................    { 
....................     
....................    set_adc_channel(1); 
01FE:  MOVLW  08
01FF:  MOVWF  78
0200:  MOVF   1F,W
0201:  ANDLW  C7
0202:  IORWF  78,W
0203:  MOVWF  1F
....................    delay_ms(10); 
0204:  MOVLW  0A
0205:  MOVWF  32
0206:  CALL   052
....................  
....................    adc_value = read_adc(); 
0207:  BSF    1F.2
0208:  BTFSC  1F.2
0209:  GOTO   208
020A:  BSF    03.5
020B:  MOVF   1E,W
020C:  BCF    03.5
020D:  MOVWF  20
020E:  MOVF   1E,W
020F:  MOVWF  21
....................    adc_valueX = adc_value; 
0210:  MOVF   21,W
0211:  MOVWF  23
0212:  MOVF   20,W
0213:  MOVWF  22
....................    bcd(); 
0214:  CALL   102
....................  
....................    lcd_line1(0); 
0215:  CLRF   32
0216:  GOTO   14C
....................  
....................    lcd_data("X= "); 
0217:  MOVLW  04
0218:  BSF    03.6
0219:  MOVWF  0D
021A:  MOVLW  00
021B:  MOVWF  0F
021C:  BCF    03.6
021D:  CALL   164
....................  
....................    lcd_data(digit4+0x30); 
021E:  MOVLW  30
021F:  ADDWF  30,W
0220:  MOVWF  32
0221:  MOVF   31,W
0222:  MOVWF  33
0223:  BTFSC  03.0
0224:  INCF   33,F
0225:  MOVF   32,W
0226:  MOVWF  35
0227:  CALL   154
....................    lcd_data(digit3+0x30); 
0228:  MOVLW  30
0229:  ADDWF  2E,W
022A:  MOVWF  32
022B:  MOVF   2F,W
022C:  MOVWF  33
022D:  BTFSC  03.0
022E:  INCF   33,F
022F:  MOVF   32,W
0230:  MOVWF  35
0231:  CALL   154
....................    lcd_data(digit2+0x30); 
0232:  MOVLW  30
0233:  ADDWF  2C,W
0234:  MOVWF  32
0235:  MOVF   2D,W
0236:  MOVWF  33
0237:  BTFSC  03.0
0238:  INCF   33,F
0239:  MOVF   32,W
023A:  MOVWF  35
023B:  CALL   154
....................    lcd_data(digit1+0x30); 
023C:  MOVLW  30
023D:  ADDWF  2A,W
023E:  MOVWF  32
023F:  MOVF   2B,W
0240:  MOVWF  33
0241:  BTFSC  03.0
0242:  INCF   33,F
0243:  MOVF   32,W
0244:  MOVWF  35
0245:  CALL   154
....................    
....................  
....................   
....................    set_adc_channel(0); 
0246:  MOVLW  00
0247:  MOVWF  78
0248:  MOVF   1F,W
0249:  ANDLW  C7
024A:  IORWF  78,W
024B:  MOVWF  1F
....................    delay_ms(10); 
024C:  MOVLW  0A
024D:  MOVWF  32
024E:  CALL   052
....................  
....................    adc_value = read_adc(); 
024F:  BSF    1F.2
0250:  BTFSC  1F.2
0251:  GOTO   250
0252:  BSF    03.5
0253:  MOVF   1E,W
0254:  BCF    03.5
0255:  MOVWF  20
0256:  MOVF   1E,W
0257:  MOVWF  21
....................    adc_valueY = adc_value; 
0258:  MOVF   21,W
0259:  MOVWF  25
025A:  MOVF   20,W
025B:  MOVWF  24
....................  
....................    bcd(); 
025C:  CALL   102
....................  
....................    lcd_data(" Y= "); 
025D:  MOVLW  06
025E:  BSF    03.6
025F:  MOVWF  0D
0260:  MOVLW  00
0261:  MOVWF  0F
0262:  BCF    03.6
0263:  CALL   164
....................  
....................    lcd_data(digit4+0x30); 
0264:  MOVLW  30
0265:  ADDWF  30,W
0266:  MOVWF  32
0267:  MOVF   31,W
0268:  MOVWF  33
0269:  BTFSC  03.0
026A:  INCF   33,F
026B:  MOVF   32,W
026C:  MOVWF  35
026D:  CALL   154
....................    lcd_data(digit3+0x30); 
026E:  MOVLW  30
026F:  ADDWF  2E,W
0270:  MOVWF  32
0271:  MOVF   2F,W
0272:  MOVWF  33
0273:  BTFSC  03.0
0274:  INCF   33,F
0275:  MOVF   32,W
0276:  MOVWF  35
0277:  CALL   154
....................    lcd_data(digit2+0x30); 
0278:  MOVLW  30
0279:  ADDWF  2C,W
027A:  MOVWF  32
027B:  MOVF   2D,W
027C:  MOVWF  33
027D:  BTFSC  03.0
027E:  INCF   33,F
027F:  MOVF   32,W
0280:  MOVWF  35
0281:  CALL   154
....................    lcd_data(digit1+0x30); 
0282:  MOVLW  30
0283:  ADDWF  2A,W
0284:  MOVWF  32
0285:  MOVF   2B,W
0286:  MOVWF  33
0287:  BTFSC  03.0
0288:  INCF   33,F
0289:  MOVF   32,W
028A:  MOVWF  35
028B:  CALL   154
....................     
....................    lcd_line2(0); 
028C:  CLRF   32
028D:  GOTO   1BA
....................     
....................    if( adc_valueY == adc_value_eskiY && adc_valueX == adc_value_eskiX ){ 
028E:  MOVF   28,W
028F:  SUBWF  24,W
0290:  BTFSS  03.2
0291:  GOTO   2A6
0292:  MOVF   29,W
0293:  SUBWF  25,W
0294:  BTFSS  03.2
0295:  GOTO   2A6
0296:  MOVF   26,W
0297:  SUBWF  22,W
0298:  BTFSS  03.2
0299:  GOTO   2A6
029A:  MOVF   27,W
029B:  SUBWF  23,W
029C:  BTFSS  03.2
029D:  GOTO   2A6
....................           
....................          lcd_data("     SABIT    "); 
029E:  MOVLW  09
029F:  BSF    03.6
02A0:  MOVWF  0D
02A1:  MOVLW  00
02A2:  MOVWF  0F
02A3:  BCF    03.6
02A4:  CALL   164
....................           
....................    }else if( adc_valueX == adc_value_eskiX ){ 
02A5:  GOTO   36D
02A6:  MOVF   26,W
02A7:  SUBWF  22,W
02A8:  BTFSS  03.2
02A9:  GOTO   2D2
02AA:  MOVF   27,W
02AB:  SUBWF  23,W
02AC:  BTFSS  03.2
02AD:  GOTO   2D2
....................        
....................       if( adc_valueY > adc_value_eskiY ){ 
02AE:  MOVF   29,W
02AF:  SUBWF  25,W
02B0:  BTFSS  03.0
02B1:  GOTO   2C0
02B2:  BTFSS  03.2
02B3:  GOTO   2B8
02B4:  MOVF   24,W
02B5:  SUBWF  28,W
02B6:  BTFSC  03.0
02B7:  GOTO   2C0
....................          lcd_data("     ILERI    "); 
02B8:  MOVLW  11
02B9:  BSF    03.6
02BA:  MOVWF  0D
02BB:  MOVLW  00
02BC:  MOVWF  0F
02BD:  BCF    03.6
02BE:  CALL   164
....................       }else if( adc_valueY < adc_value_eskiY ){ 
02BF:  GOTO   2D1
02C0:  MOVF   25,W
02C1:  SUBWF  29,W
02C2:  BTFSS  03.0
02C3:  GOTO   2D1
02C4:  BTFSS  03.2
02C5:  GOTO   2CA
02C6:  MOVF   28,W
02C7:  SUBWF  24,W
02C8:  BTFSC  03.0
02C9:  GOTO   2D1
....................          lcd_data("     GERI    "); 
02CA:  MOVLW  19
02CB:  BSF    03.6
02CC:  MOVWF  0D
02CD:  MOVLW  00
02CE:  MOVWF  0F
02CF:  BCF    03.6
02D0:  CALL   164
....................       } 
....................        
....................    }else if( adc_valueY == adc_value_eskiY ){ 
02D1:  GOTO   36D
02D2:  MOVF   28,W
02D3:  SUBWF  24,W
02D4:  BTFSS  03.2
02D5:  GOTO   2FE
02D6:  MOVF   29,W
02D7:  SUBWF  25,W
02D8:  BTFSS  03.2
02D9:  GOTO   2FE
....................        
....................       if( adc_valueX > adc_value_eskiX ){ 
02DA:  MOVF   27,W
02DB:  SUBWF  23,W
02DC:  BTFSS  03.0
02DD:  GOTO   2EC
02DE:  BTFSS  03.2
02DF:  GOTO   2E4
02E0:  MOVF   22,W
02E1:  SUBWF  26,W
02E2:  BTFSC  03.0
02E3:  GOTO   2EC
....................          lcd_data("     SAG     "); 
02E4:  MOVLW  20
02E5:  BSF    03.6
02E6:  MOVWF  0D
02E7:  MOVLW  00
02E8:  MOVWF  0F
02E9:  BCF    03.6
02EA:  CALL   164
....................       }else if( adc_valueX < adc_value_eskiX ){ 
02EB:  GOTO   2FD
02EC:  MOVF   23,W
02ED:  SUBWF  27,W
02EE:  BTFSS  03.0
02EF:  GOTO   2FD
02F0:  BTFSS  03.2
02F1:  GOTO   2F6
02F2:  MOVF   26,W
02F3:  SUBWF  22,W
02F4:  BTFSC  03.0
02F5:  GOTO   2FD
....................          lcd_data("     SOL     "); 
02F6:  MOVLW  27
02F7:  BSF    03.6
02F8:  MOVWF  0D
02F9:  MOVLW  00
02FA:  MOVWF  0F
02FB:  BCF    03.6
02FC:  CALL   164
....................       } 
....................    }else if( adc_valueY > adc_value_eskiY && adc_valueX > adc_value_eskiX ){ 
02FD:  GOTO   36D
02FE:  MOVF   29,W
02FF:  SUBWF  25,W
0300:  BTFSS  03.0
0301:  GOTO   31A
0302:  BTFSS  03.2
0303:  GOTO   308
0304:  MOVF   24,W
0305:  SUBWF  28,W
0306:  BTFSC  03.0
0307:  GOTO   31A
0308:  MOVF   27,W
0309:  SUBWF  23,W
030A:  BTFSS  03.0
030B:  GOTO   31A
030C:  BTFSS  03.2
030D:  GOTO   312
030E:  MOVF   22,W
030F:  SUBWF  26,W
0310:  BTFSC  03.0
0311:  GOTO   31A
....................        
....................          lcd_data("    ILERI SAG    "); 
0312:  MOVLW  2E
0313:  BSF    03.6
0314:  MOVWF  0D
0315:  MOVLW  00
0316:  MOVWF  0F
0317:  BCF    03.6
0318:  CALL   164
....................       
....................    }else if( adc_valueY < adc_value_eskiY && adc_valueX < adc_value_eskiX ){ 
0319:  GOTO   36D
031A:  MOVF   25,W
031B:  SUBWF  29,W
031C:  BTFSS  03.0
031D:  GOTO   336
031E:  BTFSS  03.2
031F:  GOTO   324
0320:  MOVF   28,W
0321:  SUBWF  24,W
0322:  BTFSC  03.0
0323:  GOTO   336
0324:  MOVF   23,W
0325:  SUBWF  27,W
0326:  BTFSS  03.0
0327:  GOTO   336
0328:  BTFSS  03.2
0329:  GOTO   32E
032A:  MOVF   26,W
032B:  SUBWF  22,W
032C:  BTFSC  03.0
032D:  GOTO   336
....................        
....................          lcd_data("    GERI SOL    "); 
032E:  MOVLW  37
032F:  BSF    03.6
0330:  MOVWF  0D
0331:  MOVLW  00
0332:  MOVWF  0F
0333:  BCF    03.6
0334:  CALL   164
....................       
....................    }else if( adc_valueY > adc_value_eskiY && adc_valueX < adc_value_eskiX ){ 
0335:  GOTO   36D
0336:  MOVF   29,W
0337:  SUBWF  25,W
0338:  BTFSS  03.0
0339:  GOTO   352
033A:  BTFSS  03.2
033B:  GOTO   340
033C:  MOVF   24,W
033D:  SUBWF  28,W
033E:  BTFSC  03.0
033F:  GOTO   352
0340:  MOVF   23,W
0341:  SUBWF  27,W
0342:  BTFSS  03.0
0343:  GOTO   352
0344:  BTFSS  03.2
0345:  GOTO   34A
0346:  MOVF   26,W
0347:  SUBWF  22,W
0348:  BTFSC  03.0
0349:  GOTO   352
....................        
....................          lcd_data("    ILERI SOL    "); 
034A:  MOVLW  40
034B:  BSF    03.6
034C:  MOVWF  0D
034D:  MOVLW  00
034E:  MOVWF  0F
034F:  BCF    03.6
0350:  CALL   164
....................       
....................    }else if( adc_valueY < adc_value_eskiY && adc_valueX > adc_value_eskiX ){ 
0351:  GOTO   36D
0352:  MOVF   25,W
0353:  SUBWF  29,W
0354:  BTFSS  03.0
0355:  GOTO   36D
0356:  BTFSS  03.2
0357:  GOTO   35C
0358:  MOVF   28,W
0359:  SUBWF  24,W
035A:  BTFSC  03.0
035B:  GOTO   36D
035C:  MOVF   27,W
035D:  SUBWF  23,W
035E:  BTFSS  03.0
035F:  GOTO   36D
0360:  BTFSS  03.2
0361:  GOTO   366
0362:  MOVF   22,W
0363:  SUBWF  26,W
0364:  BTFSC  03.0
0365:  GOTO   36D
....................        
....................          lcd_data("    GERI SAG    "); 
0366:  MOVLW  49
0367:  BSF    03.6
0368:  MOVWF  0D
0369:  MOVLW  00
036A:  MOVWF  0F
036B:  BCF    03.6
036C:  CALL   164
....................       
....................    } 
036D:  GOTO   1FE
....................  
....................  
.................... }    
.................... } 
....................  
036E:  SLEEP
.................... ///////////////////////////////////////////////// 
....................  
.................... void bcd (void) 
.................... {    
....................    digit4 = (adc_value/1000); 
*
0102:  MOVF   21,W
0103:  MOVWF  35
0104:  MOVF   20,W
0105:  MOVWF  34
0106:  MOVLW  03
0107:  MOVWF  37
0108:  MOVLW  E8
0109:  MOVWF  36
010A:  CALL   0DD
010B:  MOVF   78,W
010C:  MOVWF  30
010D:  MOVF   79,W
010E:  MOVWF  31
....................    digit3 = (adc_value/100 ) % 10; 
010F:  MOVF   21,W
0110:  MOVWF  35
0111:  MOVF   20,W
0112:  MOVWF  34
0113:  CLRF   37
0114:  MOVLW  64
0115:  MOVWF  36
0116:  CALL   0DD
0117:  MOVF   79,W
0118:  MOVWF  33
0119:  MOVF   78,W
011A:  MOVWF  32
011B:  MOVF   79,W
011C:  MOVWF  35
011D:  MOVF   78,W
011E:  MOVWF  34
011F:  CLRF   37
0120:  MOVLW  0A
0121:  MOVWF  36
0122:  CALL   0DD
0123:  MOVF   77,W
0124:  MOVWF  2E
0125:  MOVF   7A,W
0126:  MOVWF  2F
....................    digit2 = (adc_value/10  ) % 10; 
0127:  MOVF   21,W
0128:  MOVWF  35
0129:  MOVF   20,W
012A:  MOVWF  34
012B:  CLRF   37
012C:  MOVLW  0A
012D:  MOVWF  36
012E:  CALL   0DD
012F:  MOVF   79,W
0130:  MOVWF  33
0131:  MOVF   78,W
0132:  MOVWF  32
0133:  MOVF   79,W
0134:  MOVWF  35
0135:  MOVF   78,W
0136:  MOVWF  34
0137:  CLRF   37
0138:  MOVLW  0A
0139:  MOVWF  36
013A:  CALL   0DD
013B:  MOVF   77,W
013C:  MOVWF  2C
013D:  MOVF   7A,W
013E:  MOVWF  2D
....................    digit1 = (adc_value     ) % 10;  
013F:  MOVF   21,W
0140:  MOVWF  35
0141:  MOVF   20,W
0142:  MOVWF  34
0143:  CLRF   37
0144:  MOVLW  0A
0145:  MOVWF  36
0146:  CALL   0DD
0147:  MOVF   77,W
0148:  MOVWF  2A
0149:  MOVF   7A,W
014A:  MOVWF  2B
014B:  RETURN
.................... } 
....................  
.................... ///////////////////////////////////////////////// 
....................  
.................... void   lcd_init (void)            // its a lcd initilize function 
.................... {    
....................    output_low (lcd_rs); 
*
00B1:  BSF    03.5
00B2:  BCF    06.5
00B3:  BCF    03.5
00B4:  BCF    06.5
....................    output_low (lcd_en); 
00B5:  BSF    03.5
00B6:  BCF    06.4
00B7:  BCF    03.5
00B8:  BCF    06.4
....................  
....................    delay_ms(250); 
00B9:  MOVLW  FA
00BA:  MOVWF  32
00BB:  CALL   052
....................  
....................    lcd_nibble(func_set); 
00BC:  MOVLW  28
00BD:  MOVWF  37
00BE:  CALL   066
....................  
....................    delay_ms(1); 
00BF:  MOVLW  01
00C0:  MOVWF  32
00C1:  CALL   052
....................    lcd_cmd(func_set);      // function set 
00C2:  MOVLW  28
00C3:  MOVWF  34
00C4:  CALL   0A1
....................  
....................    delay_ms(1); 
00C5:  MOVLW  01
00C6:  MOVWF  32
00C7:  CALL   052
....................    lcd_cmd(func_set);      // function set 
00C8:  MOVLW  28
00C9:  MOVWF  34
00CA:  CALL   0A1
....................  
....................    delay_ms(1); 
00CB:  MOVLW  01
00CC:  MOVWF  32
00CD:  CALL   052
....................    lcd_cmd(func_set);      // function set 
00CE:  MOVLW  28
00CF:  MOVWF  34
00D0:  CALL   0A1
....................  
....................    lcd_cmd(disp_control);   // display controll 
00D1:  MOVLW  0C
00D2:  MOVWF  34
00D3:  CALL   0A1
....................  
....................    lcd_clear(); 
*
00DA:  BCF    0A.3
00DB:  BCF    0A.4
00DC:  GOTO   1D3 (RETURN)
....................  
.................... } 
....................  
.................... ///////////////////////////////////////////////// 
....................  
.................... void lcd_line1 (unsigned char position)   //lcd line 1 position function 
.................... {   lcd_cmd(0x80 + position); } 
*
014C:  MOVLW  80
014D:  ADDWF  32,W
014E:  MOVWF  33
014F:  MOVWF  34
0150:  CALL   0A1
0151:  BCF    0A.3
0152:  BCF    0A.4
0153:  GOTO   217 (RETURN)
....................  
.................... void lcd_line2 (unsigned char position)   //lcd line 2 position function 
.................... {   lcd_cmd(0xc0 + position); } 
*
01BA:  MOVLW  C0
01BB:  ADDWF  32,W
01BC:  MOVWF  33
01BD:  MOVWF  34
01BE:  CALL   0A1
01BF:  BCF    0A.3
01C0:  BCF    0A.4
01C1:  GOTO   28E (RETURN)
....................  
.................... ///////////////////////////////////////////////// 
....................  
.................... void lcd_clear (void)                     // its a lcd clear function 
.................... {    
....................     lcd_cmd (disp_clear); 
*
00D4:  MOVLW  01
00D5:  MOVWF  34
00D6:  CALL   0A1
....................     delay_ms(50); 
00D7:  MOVLW  32
00D8:  MOVWF  32
00D9:  CALL   052
.................... } 
....................  
.................... ///////////////////////////////////////////////// 
....................  
.................... void   lcd_cmd (unsigned char i)          // its a command function 
.................... {    
....................    unsigned int8 temp; 
....................  
....................    output_low (lcd_rs);       
*
00A1:  BSF    03.5
00A2:  BCF    06.5
00A3:  BCF    03.5
00A4:  BCF    06.5
....................    temp=i; 
00A5:  MOVF   34,W
00A6:  MOVWF  35
....................    lcd_nibble (temp); 
00A7:  MOVF   35,W
00A8:  MOVWF  37
00A9:  CALL   066
....................  
....................    temp=temp<<4; 
00AA:  SWAPF  35,F
00AB:  MOVLW  F0
00AC:  ANDWF  35,F
....................    lcd_nibble (temp); 
00AD:  MOVF   35,W
00AE:  MOVWF  37
00AF:  CALL   066
00B0:  RETURN
....................  
.................... } 
....................  
.................... ///////////////////////////////////////////////// 
....................  
.................... void   lcd_data(unsigned char i)          // its a data function 
.................... {    
....................    unsigned int8 temp; 
....................  
....................    output_high(lcd_rs);       
*
0154:  BSF    03.5
0155:  BCF    06.5
0156:  BCF    03.5
0157:  BSF    06.5
....................    temp=i; 
0158:  MOVF   35,W
0159:  MOVWF  36
....................    lcd_nibble (temp); 
015A:  MOVF   36,W
015B:  MOVWF  37
015C:  CALL   066
....................  
....................    temp=temp<<4; 
015D:  SWAPF  36,F
015E:  MOVLW  F0
015F:  ANDWF  36,F
....................    lcd_nibble (temp); 
0160:  MOVF   36,W
0161:  MOVWF  37
0162:  CALL   066
0163:  RETURN
.................... } 
....................  
.................... ///////////////////////////////////////////////// 
....................  
.................... void lcd_nibble (unsigned char j)         // its a 4 bit mode function for lcd 
.................... {    
....................    if(bit_test(j,4))   output_high(lcd_d4); 
*
0066:  BTFSS  37.4
0067:  GOTO   06D
0068:  BSF    03.5
0069:  BCF    06.0
006A:  BCF    03.5
006B:  BSF    06.0
006C:  GOTO   071
....................    else                output_low (lcd_d4); 
006D:  BSF    03.5
006E:  BCF    06.0
006F:  BCF    03.5
0070:  BCF    06.0
....................  
....................    if(bit_test(j,5))   output_high(lcd_d5); 
0071:  BTFSS  37.5
0072:  GOTO   078
0073:  BSF    03.5
0074:  BCF    06.1
0075:  BCF    03.5
0076:  BSF    06.1
0077:  GOTO   07C
....................    else                output_low (lcd_d5); 
0078:  BSF    03.5
0079:  BCF    06.1
007A:  BCF    03.5
007B:  BCF    06.1
....................  
....................    if(bit_test(j,6))   output_high(lcd_d6); 
007C:  BTFSS  37.6
007D:  GOTO   083
007E:  BSF    03.5
007F:  BCF    06.2
0080:  BCF    03.5
0081:  BSF    06.2
0082:  GOTO   087
....................    else                output_low (lcd_d6); 
0083:  BSF    03.5
0084:  BCF    06.2
0085:  BCF    03.5
0086:  BCF    06.2
....................  
....................    if(bit_test(j,7))   output_high(lcd_d7); 
0087:  BTFSS  37.7
0088:  GOTO   08E
0089:  BSF    03.5
008A:  BCF    06.3
008B:  BCF    03.5
008C:  BSF    06.3
008D:  GOTO   092
....................    else                output_low (lcd_d7); 
008E:  BSF    03.5
008F:  BCF    06.3
0090:  BCF    03.5
0091:  BCF    06.3
....................  
....................    output_high(lcd_en); 
0092:  BSF    03.5
0093:  BCF    06.4
0094:  BCF    03.5
0095:  BSF    06.4
....................    delay_us (50); 
0096:  MOVLW  52
0097:  MOVWF  77
0098:  DECFSZ 77,F
0099:  GOTO   098
009A:  GOTO   09B
009B:  NOP
....................    output_low (lcd_en); 
009C:  BSF    03.5
009D:  BCF    06.4
009E:  BCF    03.5
009F:  BCF    06.4
00A0:  RETURN
.................... } 
....................  

Configuration Fuses:
   Word  1: 3F72   HS NOWDT PUT BROWNOUT NOLVP NOCPD NOWRT NODEBUG NOPROTECT
